package it.unipi.rcl.project.client;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.lang.reflect.Method;
import java.util.ResourceBundle;

/**
 * Form that displays the sign up/sign in page at the start of the client application
 */
public class SignUpInForm extends Form {
	private JButton registerButton;
	private JButton loginButton;
	private JPanel panel;
	private JTextField usernameTextField;
	private JPasswordField passwordTextField;
	private JButton passHideButton;

	private String passwordHint;
	private String usernameHint;

	public SignUpInForm(AppEventDelegate aed) {
		super(aed);
		passwordHint = resourceBundle.getString("password") + " ";
		usernameHint = resourceBundle.getString("username") + " ";

		ActionListener loginListener = actionEvent -> {
			if(!checkUsernameAndPassword()){
				return;
			}
			ServerProxy.instance.login(usernameTextField.getText().trim(), passwordTextField.getText().trim(), () -> appEventDelegate.onLoginComplete(), errorMessage -> {
				switch (errorMessage) {
					case UserAlreadyLoggedIn:
						AlertForm.errorAlert("user.already.logged");
						break;
					case InvalidUsername:
						AlertForm.errorAlert("user.invalid");
						break;
					case InvalidPassword:
						AlertForm.errorAlert("pass.invalid");
						break;
				}
			});
		};

		loginButton.addActionListener(loginListener);

		registerButton.addActionListener(actionEvent -> {
			if(!checkUsernameAndPassword()){
				return;
			}
			//Show form to insert the tags for the user
			new RegisterTagsForm(tags -> ServerProxy.instance.register(usernameTextField.getText().trim(), passwordTextField.getText().trim(), tags, () -> loginListener.actionPerformed(actionEvent), errorMessage -> {
				switch (errorMessage) {
					case UserAlreadyExists:
						new AlertForm("error", "user.exists", "ok");
						break;
					case InvalidTags:
						new AlertForm("error", "tags.invalid", "ok");
						break;
					case InvalidPassword:
						new AlertForm("error", "pass.invalid", "ok");
						break;
					case InvalidUsername:
						new AlertForm("error", "user.invalid", "ok");
				}
			}));
		});

		setHint(usernameTextField, usernameHint);
		setHint(passwordTextField, passwordHint);

		//Hide/show password
		passHideButton.addActionListener(actionEvent -> {
			//If the password is showing the hint, the hide/show button doesn't do anything
			if (passwordTextField.getText().equals(passwordHint)) {
				return;
			}
			if (passwordTextField.getEchoChar() == (char) 0) {
				passwordTextField.setEchoChar('*');
				passHideButton.setText(resourceBundle.getString("pass.show"));
			} else {
				passwordTextField.setEchoChar((char) 0);
				passHideButton.setText(resourceBundle.getString("pass.hide"));
			}
		});
	}

	/**
	 * Method that checks if the user inserted a username and a password
	 */
	private boolean checkUsernameAndPassword(){
		if(usernameTextField.getText().equals(usernameHint)){
			AlertForm.errorAlert("no.username");
			return false;
		}
		if(passwordTextField.getText().equals(passwordHint)){
			AlertForm.errorAlert("no.password");
			return false;
		}
		return true;
	}

	@Override
	public JPanel getPanel() {
		return panel;
	}




	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		panel = new JPanel();
		panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
		registerButton = new JButton();
		this.$$$loadButtonText$$$(registerButton, this.$$$getMessageFromBundle$$$("it/unipi/rcl/project/client/WinsomeStrings", "register"));
		panel.add(registerButton, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setHorizontalAlignment(0);
		label1.setHorizontalTextPosition(0);
		this.$$$loadLabelText$$$(label1, this.$$$getMessageFromBundle$$$("it/unipi/rcl/project/client/WinsomeStrings", "welcome"));
		panel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		loginButton = new JButton();
		this.$$$loadButtonText$$$(loginButton, this.$$$getMessageFromBundle$$$("it/unipi/rcl/project/client/WinsomeStrings", "login"));
		panel.add(loginButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		usernameTextField = new JTextField();
		usernameTextField.setText("");
		panel.add(usernameTextField, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		panel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		passwordTextField = new JPasswordField();
		panel1.add(passwordTextField, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		passHideButton = new JButton();
		this.$$$loadButtonText$$$(passHideButton, this.$$$getMessageFromBundle$$$("it/unipi/rcl/project/client/WinsomeStrings", "pass.show"));
		panel1.add(passHideButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	private static Method $$$cachedGetBundleMethod$$$ = null;

	private String $$$getMessageFromBundle$$$(String path, String key) {
		ResourceBundle bundle;
		try {
			Class<?> thisClass = this.getClass();
			if ($$$cachedGetBundleMethod$$$ == null) {
				Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
				$$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
			}
			bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
		} catch (Exception e) {
			bundle = ResourceBundle.getBundle(path);
		}
		return bundle.getString(key);
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadLabelText$$$(JLabel component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setDisplayedMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadButtonText$$$(AbstractButton component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return panel;
	}
}
