package it.unipi.rcl.project.client;

import it.unipi.rcl.project.common.Pair;

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.ResourceBundle;

/**
 * Form that displays the Discover page of the winsome client
 */
public class DiscoverForm extends WinsomeForm {
	private JPanel panel;
	private JButton profileButton;
	private JButton balanceButton;
	private JButton feedButton;
	private JButton blogButton;
	private JButton discoverButton;
	private JScrollPane scrollPane;

	DiscoverForm(AppEventDelegate aed) {
		super(aed);

		ServerProxy.instance.listUsers(users -> {
			if (users == null || users.size() < 1) {
				//If no users returned, show message
				scrollPane.setViewportView(new JLabel(resourceBundle.getString("no.users")));
			} else {
				//Create the panel that holds all users
				JPanel contents = new JPanel();
				contents.setLayout(new BoxLayout(contents, BoxLayout.Y_AXIS));
				for (Pair<Integer, String[]> u : users) {
					if (u.first.equals(ServerProxy.instance.userId)) {
						continue;
					}
					contents.add(new UserPanel(u));
				}
				scrollPane.getViewport().add(contents);
			}
		}, errorMessage -> {
		});

		init();
	}

	@Override
	public JPanel getPanel() {
		return panel;
	}

	@Override
	protected JButton getBalanceButton() {
		return balanceButton;
	}

	@Override
	protected JButton getBlogButton() {
		return blogButton;
	}

	@Override
	protected JButton getDiscoverButton() {
		return discoverButton;
	}

	@Override
	protected JButton getFeedButton() {
		return feedButton;
	}

	@Override
	protected JButton getProfileButton() {
		return profileButton;
	}


	/**
	 * Class to display a single user in the list
	 */
	private static class UserPanel extends JPanel {
		private boolean isFollowed; //Is the user followed by the current user?

		public UserPanel(Pair<Integer, String[]> user) {
			super();
			setLayout(new FlowLayout());

			//Display the username
			JLabel usernameLabel = new JLabel(user.first.toString());
			ServerProxy.instance.getUsernameFromId(user.first, usernameLabel::setText, errorMessage -> {
			});
			usernameLabel.setHorizontalTextPosition(JLabel.TRAILING);
			add(usernameLabel);

			//Display the tags
			JPanel tags = new JPanel();
			tags.setLayout(new FlowLayout());
			for (String t : user.second) {
				JLabel tagLabel = new JLabel(t);
				tagLabel.setForeground(Color.GRAY);
				tags.add(tagLabel);
			}
			add(tags);

			JButton followButton = new JButton();

			ServerProxy.instance.isFollowing(user.first, isFollowed -> {
				this.isFollowed = isFollowed;
				if (isFollowed) {
					followButton.setText(resourceBundle.getString("unfollow"));
				} else {
					followButton.setText(resourceBundle.getString("follow"));
				}
				followButton.setEnabled(true);
			}, errorMessage -> {});

			followButton.setEnabled(false);
			followButton.addActionListener(actionEvent -> {
				followButton.setEnabled(false);
				if (isFollowed) { //If the user is following, set the button to unfollow
					ServerProxy.instance.unfollowUser(user.first, () -> {
						followButton.setText(resourceBundle.getString("follow"));
						isFollowed = false;
						followButton.setEnabled(true);
					}, errorMessage -> {
						switch (errorMessage) {
							case NotFollowing:
								new AlertForm("error", "error.not.following", "ok");
								break;
							case InvalidUserId:
								new AlertForm("error", "user.invalid", "ok");
								break;
						}
						followButton.setEnabled(true);
					});
				} else { //If the user is not following, set the button to follow
					ServerProxy.instance.followUser(user.first, () -> {
						followButton.setText(resourceBundle.getString("unfollow"));
						isFollowed = true;
						followButton.setEnabled(true);
					}, errorMessage -> {
						switch (errorMessage) {
							case AlreadyFollowed:
								new AlertForm("error", "error.already.followed", "ok");
								break;
							case InvalidUserId:
								new AlertForm("error", "user.invalid", "ok");
								break;
						}
						followButton.setEnabled(true);
					});
				}
			});
			add(followButton);
		}
	}


	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		panel = new JPanel();
		panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
		panel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		profileButton = new JButton();
		profileButton.setText("Button");
		panel1.add(profileButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		balanceButton = new JButton();
		balanceButton.setText("Button");
		panel1.add(balanceButton, new com.intellij.uiDesigner.core.GridConstraints(0, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		feedButton = new JButton();
		feedButton.setEnabled(true);
		this.$$$loadButtonText$$$(feedButton, this.$$$getMessageFromBundle$$$("it/unipi/rcl/project/client/WinsomeStrings", "feed"));
		panel1.add(feedButton, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		blogButton = new JButton();
		this.$$$loadButtonText$$$(blogButton, this.$$$getMessageFromBundle$$$("it/unipi/rcl/project/client/WinsomeStrings", "blog"));
		panel1.add(blogButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		discoverButton = new JButton();
		discoverButton.setEnabled(false);
		this.$$$loadButtonText$$$(discoverButton, this.$$$getMessageFromBundle$$$("it/unipi/rcl/project/client/WinsomeStrings", "discover"));
		panel1.add(discoverButton, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		scrollPane = new JScrollPane();
		panel.add(scrollPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
	}

	private static Method $$$cachedGetBundleMethod$$$ = null;

	private String $$$getMessageFromBundle$$$(String path, String key) {
		ResourceBundle bundle;
		try {
			Class<?> thisClass = this.getClass();
			if ($$$cachedGetBundleMethod$$$ == null) {
				Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
				$$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
			}
			bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
		} catch (Exception e) {
			bundle = ResourceBundle.getBundle(path);
		}
		return bundle.getString(key);
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadButtonText$$$(AbstractButton component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return panel;
	}

}
